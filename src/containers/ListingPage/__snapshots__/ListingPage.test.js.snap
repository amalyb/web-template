// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ListingPage matches snapshot 1`] = `
<Page
  author="user-1 display name"
  contentType="website"
  description="listing1 description"
  facebookImages={Array []}
  schema={
    Object {
      "@context": "http://schema.org",
      "@type": "Product",
      "description": "listing1 description",
      "image": Array [],
      "name": "ListingPage.schemaTitle",
      "offers": Object {
        "@type": "Offer",
        "availability": "https://schema.org/OutOfStock",
        "price": 55,
        "priceCurrency": "USD",
        "url": "http://localhost:3000/l/listing1-title/listing1",
      },
    }
  }
  scrollingDisabled={false}
  title="ListingPage.schemaTitle"
  twitterImages={Array []}
>
  <LayoutSingleColumn
    className="pageRoot"
    rootClassName={null}
  >
    <LayoutWrapperTopbar
      className={null}
      rootClassName={null}
    >
      <withRouter(Connect(TopbarContainerComponent)) />
    </LayoutWrapperTopbar>
    <LayoutWrapperMain
      className={null}
      rootClassName={null}
    >
      <div>
        <SectionImages
          editParams={
            Object {
              "id": "listing1",
              "slug": "listing1-title",
              "tab": "details",
              "type": "edit",
            }
          }
          handleViewPhotosClick={[Function]}
          imageCarouselOpen={false}
          isOwnListing={false}
          listing={
            Object {
              "attributes": Object {
                "deleted": false,
                "description": "listing1 description",
                "geolocation": LatLng {
                  "_sdkType": "LatLng",
                  "lat": 40,
                  "lng": 60,
                },
                "price": Money {
                  "_sdkType": "Money",
                  "amount": 5500,
                  "currency": "USD",
                },
                "publicData": Object {},
                "state": "published",
                "title": "listing1 title",
              },
              "author": Object {
                "attributes": Object {
                  "banned": false,
                  "deleted": false,
                  "profile": Object {
                    "abbreviatedName": "TT",
                    "displayName": "user-1 display name",
                  },
                },
                "id": UUID {
                  "_sdkType": "UUID",
                  "uuid": "user-1",
                },
                "type": "user",
              },
              "id": UUID {
                "_sdkType": "UUID",
                "uuid": "listing1",
              },
              "images": Array [],
              "type": "listing",
            }
          }
          listingConfig={
            Object {
              "aspectHeight": 400,
              "aspectWidth": 400,
              "showUnitTypeTranslations": false,
              "variantPrefix": "listing-card",
            }
          }
          onImageCarouselClose={[Function]}
          onManageDisableScrolling={[Function]}
          title="listing1 title"
        />
        <div
          className="contentWrapperForHeroLayout"
        >
          <SectionAvatar
            params={
              Object {
                "id": "listing1",
                "slug": "listing1-title",
              }
            }
            user={
              Object {
                "attributes": Object {
                  "banned": false,
                  "deleted": false,
                  "profile": Object {
                    "abbreviatedName": "TT",
                    "displayName": "user-1 display name",
                  },
                },
                "id": UUID {
                  "_sdkType": "UUID",
                  "uuid": "user-1",
                },
                "type": "user",
              }
            }
          />
          <div
            className="mainColumnForHeroLayout"
          >
            <SectionHeading
              authorLink={
                <NamedLink
                  className="authorNameLink"
                  name="ListingPage"
                  params={
                    Object {
                      "id": "listing1",
                      "slug": "listing1-title",
                    }
                  }
                  to={
                    Object {
                      "hash": "#author",
                    }
                  }
                >
                  user-1 display name
                </NamedLink>
              }
              category={null}
              formattedPrice={55}
              onContactUser={[Function]}
              priceTitle={55}
              richTitle={
                <span>
                  
                  listing1
                   
                  title
                  
                </span>
              }
              showContactUser={true}
            />
            <SectionTextMaybe
              heading="ListingPage.descriptionTitle"
              text="listing1 description"
            />
            <SectionDetailsMaybe
              customConfig={
                Object {
                  "listingExtendedData": Array [
                    Object {
                      "includeForProcessAliases": Array [
                        "flex-product-default-process/release-1",
                      ],
                      "indexForSearch": true,
                      "key": "category",
                      "listingPageConfig": Object {
                        "isDetail": true,
                        "label": "Category",
                      },
                      "schemaOptions": Array [
                        "Cat 1",
                        "Cat 2",
                      ],
                      "schemaType": "enum",
                      "scope": "public",
                    },
                    Object {
                      "includeForProcessAliases": Array [
                        "flex-booking-default-process/release-1",
                      ],
                      "indexForSearch": true,
                      "key": "amenities",
                      "listingPageConfig": Object {
                        "group": "secondary",
                        "label": "Amenities",
                        "searchMode": "has_all",
                      },
                      "schemaOptions": Array [
                        "Feat 1",
                        "Feat 2",
                        "Feat 3",
                      ],
                      "schemaType": "multi-enum",
                      "scope": "public",
                    },
                  ],
                }
              }
              intl={
                Object {
                  "formatDate": [Function],
                  "formatMessage": [Function],
                  "formatNumber": [Function],
                  "formatPlural": [Function],
                  "formatRelativeTime": [Function],
                  "formatTime": [Function],
                  "now": [Function],
                }
              }
              metadata={Object {}}
              publicData={Object {}}
            />
            <SectionMultiEnumMaybe
              heading="Amenities"
              key="amenities"
              options={
                Array [
                  Object {
                    "key": "feat_1",
                    "label": "Feat 1",
                  },
                  Object {
                    "key": "feat_2",
                    "label": "Feat 2",
                  },
                  Object {
                    "key": "feat_3",
                    "label": "Feat 3",
                  },
                ]
              }
            />
            <SectionMapMaybe
              className={null}
              geolocation={
                LatLng {
                  "_sdkType": "LatLng",
                  "lat": 40,
                  "lng": 60,
                }
              }
              listingId={
                UUID {
                  "_sdkType": "UUID",
                  "uuid": "listing1",
                }
              }
              mapsConfig={
                Object {
                  "customMarker": Object {
                    "anchorX": 16,
                    "anchorY": 32,
                    "enabled": false,
                    "height": 32,
                    "url": "http://localhost:3000/static/icons/map-marker-32x32.png",
                    "width": 32,
                  },
                  "fuzzy": Object {
                    "circleColor": "#c0392b",
                    "defaultZoomLevel": 13,
                    "enabled": false,
                    "offset": 500,
                  },
                  "googleMapsAPIKey": undefined,
                  "mapProvider": "MAPBOX",
                  "mapboxAccessToken": undefined,
                  "search": Object {
                    "currentLocationBoundsDistance": 1000,
                    "defaults": Array [
                      Object {
                        "id": "default-helsinki",
                        "predictionPlace": Object {
                          "address": "Helsinki, Finland",
                          "bounds": LatLngBounds {
                            "_sdkType": "LatLngBounds",
                            "ne": LatLng {
                              "_sdkType": "LatLng",
                              "lat": 60.29783,
                              "lng": 25.25448,
                            },
                            "sw": LatLng {
                              "_sdkType": "LatLng",
                              "lat": 59.92248,
                              "lng": 24.78287,
                            },
                          },
                        },
                      },
                      Object {
                        "id": "default-turku",
                        "predictionPlace": Object {
                          "address": "Turku, Finland",
                          "bounds": LatLngBounds {
                            "_sdkType": "LatLngBounds",
                            "ne": LatLng {
                              "_sdkType": "LatLng",
                              "lat": 60.53045,
                              "lng": 22.38197,
                            },
                            "sw": LatLng {
                              "_sdkType": "LatLng",
                              "lat": 60.33361,
                              "lng": 22.06644,
                            },
                          },
                        },
                      },
                      Object {
                        "id": "default-tampere",
                        "predictionPlace": Object {
                          "address": "Tampere, Finland",
                          "bounds": LatLngBounds {
                            "_sdkType": "LatLngBounds",
                            "ne": LatLng {
                              "_sdkType": "LatLng",
                              "lat": 61.83657,
                              "lng": 24.11838,
                            },
                            "sw": LatLng {
                              "_sdkType": "LatLng",
                              "lat": 61.42728,
                              "lng": 23.5422,
                            },
                          },
                        },
                      },
                      Object {
                        "id": "default-oulu",
                        "predictionPlace": Object {
                          "address": "Oulu, Finland",
                          "bounds": LatLngBounds {
                            "_sdkType": "LatLngBounds",
                            "ne": LatLng {
                              "_sdkType": "LatLng",
                              "lat": 65.56434,
                              "lng": 26.77069,
                            },
                            "sw": LatLng {
                              "_sdkType": "LatLng",
                              "lat": 64.8443,
                              "lng": 24.11494,
                            },
                          },
                        },
                      },
                      Object {
                        "id": "default-ruka",
                        "predictionPlace": Object {
                          "address": "Ruka, Finland",
                          "bounds": LatLngBounds {
                            "_sdkType": "LatLngBounds",
                            "ne": LatLng {
                              "_sdkType": "LatLng",
                              "lat": 66.16997,
                              "lng": 29.16773,
                            },
                            "sw": LatLng {
                              "_sdkType": "LatLng",
                              "lat": 66.16095,
                              "lng": 29.13572,
                            },
                          },
                        },
                      },
                    ],
                    "suggestCurrentLocation": true,
                  },
                }
              }
              publicData={Object {}}
              rootClassName={null}
            />
            <SectionReviews
              fetchReviewsError={null}
              reviews={Array []}
            />
            <SectionAuthorMaybe
              authorDisplayName="user-1 display name"
              currentUser={
                Object {
                  "attributes": Object {
                    "banned": false,
                    "deleted": false,
                    "email": "user-2@example.com",
                    "emailVerified": true,
                    "profile": Object {
                      "abbreviatedName": "user-2 abbreviated name",
                      "displayName": "user-2 display name",
                      "firstName": "user-2 first name",
                      "lastName": "user-2 last name",
                    },
                  },
                  "id": UUID {
                    "_sdkType": "UUID",
                    "uuid": "user-2",
                  },
                  "type": "currentUser",
                }
              }
              isEnquiryModalOpen={false}
              listing={
                Object {
                  "attributes": Object {
                    "deleted": false,
                    "description": "listing1 description",
                    "geolocation": LatLng {
                      "_sdkType": "LatLng",
                      "lat": 40,
                      "lng": 60,
                    },
                    "price": Money {
                      "_sdkType": "Money",
                      "amount": 5500,
                      "currency": "USD",
                    },
                    "publicData": Object {},
                    "state": "published",
                    "title": "listing1 title",
                  },
                  "author": Object {
                    "attributes": Object {
                      "banned": false,
                      "deleted": false,
                      "profile": Object {
                        "abbreviatedName": "TT",
                        "displayName": "user-1 display name",
                      },
                    },
                    "id": UUID {
                      "_sdkType": "UUID",
                      "uuid": "user-1",
                    },
                    "type": "user",
                  },
                  "id": UUID {
                    "_sdkType": "UUID",
                    "uuid": "listing1",
                  },
                  "images": Array [],
                  "type": "listing",
                }
              }
              onCloseEnquiryModal={[Function]}
              onContactUser={[Function]}
              onManageDisableScrolling={[Function]}
              onSubmitEnquiry={[Function]}
              sendEnquiryError={null}
              sendEnquiryInProgress={false}
              title="listing1 title"
            />
          </div>
          <div
            className="orderColumnForHeroLayout"
          >
            <withRouter(injectIntl(OrderPanel))
              authorDisplayName="user-1 display name"
              className="orderPanel"
              dayCountAvailableForBooking={90}
              fetchLineItemsError={null}
              fetchLineItemsInProgress={false}
              isOwnListing={false}
              lineItems={null}
              listing={
                Object {
                  "attributes": Object {
                    "deleted": false,
                    "description": "listing1 description",
                    "geolocation": LatLng {
                      "_sdkType": "LatLng",
                      "lat": 40,
                      "lng": 60,
                    },
                    "price": Money {
                      "_sdkType": "Money",
                      "amount": 5500,
                      "currency": "USD",
                    },
                    "publicData": Object {},
                    "state": "published",
                    "title": "listing1 title",
                  },
                  "author": Object {
                    "attributes": Object {
                      "banned": false,
                      "deleted": false,
                      "profile": Object {
                        "abbreviatedName": "TT",
                        "displayName": "user-1 display name",
                      },
                    },
                    "id": UUID {
                      "_sdkType": "UUID",
                      "uuid": "user-1",
                    },
                    "type": "user",
                  },
                  "id": UUID {
                    "_sdkType": "UUID",
                    "uuid": "listing1",
                  },
                  "images": Array [],
                  "type": "listing",
                }
              }
              marketplaceCurrency="USD"
              monthlyTimeSlots={null}
              onContactUser={[Function]}
              onFetchTimeSlots={[Function]}
              onFetchTransactionLineItems={[Function]}
              onManageDisableScrolling={[Function]}
              onSubmit={[Function]}
              title={
                <Memo(MemoizedFormattedMessage)
                  id="ListingPage.orderTitle"
                  values={
                    Object {
                      "title": <span>
                        
                        listing1
                         
                        title
                        
                      </span>,
                    }
                  }
                />
              }
            />
          </div>
        </div>
      </div>
    </LayoutWrapperMain>
    <LayoutWrapperFooter
      className={null}
      rootClassName={null}
    >
      <injectIntl(Footer) />
    </LayoutWrapperFooter>
  </LayoutSingleColumn>
</Page>
`;
